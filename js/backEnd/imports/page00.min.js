function ldqrBaseBoutonMenu() {
  var boutonsMenu = document.querySelectorAll(".svg-bouton"),
    bvLength = boutonsMenu.length,
    i = bvLength - 1;
  for (; i >= 0; i--) {
    new ldqrBoutonMenu(boutonsMenu[i]);
  }
}

/**
 * appelé quand il y a un Svg sollicité
 *
 * @param {object} element
 */

function ldqrBoutonMenu(element) {
  this.el = element;
  this.el.addEventListener("mousedown", this, { passive: false, capture: false });
  this.el.addEventListener("mouseup", this, { passive: false, capture: false });
  this.el.addEventListener("touchstart", this, { passive: false, capture: false });
  this.el.addEventListener("touchend", this, { passive: false, capture: false });
  // pour a11y
  // this.el.addEventListener("keydown", this, { passive: false, capture: false });
}

function fonctionBouton(elt) {
  var type = "";
  console.log("fonction", elt);
  var eltId = elt.getAttribute("id");
  if (elt.classList.contains("bouton-choix-police")) {
    type = "font-name";
  } else if (elt.classList.contains("font-size")) {
    type = "font-size";
  } else if (elt.classList.contains("space-word")) {
    type = "space-word";
  } else if (elt.classList.contains("space-car")) {
    type = "space-car";
  } else if (elt.classList.contains("space-line")) {
    type = "space-line";
  } else if (elt.classList.contains("couleur-fond")) {
    type = "couleur-fond";
  } else if (elt.classList.contains("texte-image")) {
    type = "texte-image";
  } else if (elt.classList.contains("couleur-image")) {
    type = "couleur-image";
  } else if (elt.classList.contains("def-image")) {
    type = "def-image";
  } else if (elt.classList.contains("def-image-00")) {
    type = "def-image";
  } else if (elt.classList.contains("affiche-texte")) {
    type = "affiche-texte";
  } else if (elt.classList.contains("affiche-image")) {
    type = "affiche-image";
  } else if (elt.classList.contains("chiffre-dblTape")) {
    type = "vitesse-double-tape";
  } else if (eltId === "boutonBW" || eltId === "boutonCouleur") {
    type = "couleur-image";
  } else if (elt.classList.contains("bouton-version-active")) {
    type = "bouton-version-active";
  } else if (elt.classList.contains("bouton-couleur-active")) {
    type = "bouton-couleur-active";
  } else if (elt.classList.contains("bouton-dys-active")) {
    type = "bouton-dys-active";
  } else if (elt.classList.contains("bouton-majuscule-active")) {
    type = "font-casse";
  } else if (elt.classList.contains("bouton-bulle-active")) {
    type = "bouton-bulle-active";
  } else if (eltId === "vitesseAudioVal") {
    ldqr.DATA_LOCAL_FORAGE.setItem("vitesse-audio-voix", Math.round(ldqr.VITESSE_SON_VOIX * 100) / 100).then(function (d) {});
  } else if (eltId === "desactiverAudio" || eltId === "activerAudio") {
    ldqr.DATA_LOCAL_FORAGE.setItem("bouton-audio-active", eltId).then(function (d) {
      new activerDesactiverBoutonAudio(eltId);
    });
  } else if (eltId === "gras" || eltId === "italique" || eltId === "souligne" || eltId === "muet") {
    type = "bouton-dys-choix";
  }

  return type;
}

/**
 *  On touch start, add an event listener for touch end. Store the
 *  touch start X, Y coordinates for later use.
 *
 *  @property {Object} event
 */

ldqrBoutonMenu.prototype.touchStart = function (event) {
  // event.preventDefault();
  var valX = "";
  var valY = "";
  switch (event.type) {
    case "mousedown":
    case "mouseup":
      valX = event.clientX;
      valY = event.clientY;
      break;
    case "touchstart":
    case "touchend":
      valX = event.changedTouches[0].clientX;
      valY = event.changedTouches[0].clientY;
      break;
    default:
      break;
  }
  this.startX = valX;
  this.startY = valY;
  for (var i = 0; i < ldqr.END_EVENT.length; i++) {
    window.addEventListener(ldqr.END_EVENT[i], this, false);
  }
  // window.addEventListener(ldqr.END_EVENT, this, false);
};
ldqrBoutonMenu.prototype.touchMove = function (event) {
  event.preventDefault();
};

/**
 *  On touch end, remove our event listeners. Determine if the user action was a
 *  tap, or gesture; if the action was a tap then add <code>ldqr.ACTIVE_CSS_CLASS</code>
 *  to the body class and prevent default. Otherwise, allow ldqr to handle the event.
 *
 *  @property {Object} event The required event object
 */
ldqrBoutonMenu.prototype.touchEnd = function (event) {
  var elt = this.el;
  console.log("focus", elt.focus());

  for (var i = 0; i < ldqr.END_EVENT.length; i++) {
    window.removeEventListener(ldqr.END_EVENT[i], this, false);
  }
  var valX = "";
  var valY = "";
  switch (event.type) {
    case "mousedown":
    case "mouseup":
      valX = event.clientX;
      valY = event.clientY;
      break;
    case "touchstart":
    case "touchend":
      valX = event.changedTouches[0].clientX;
      valY = event.changedTouches[0].clientY;
      break;
    default:
      break;
  }
  this.xTap = Math.abs(this.startX - valX) < ldqr.TAP_THRESHOLD;
  this.yTap = Math.abs(this.startY - valY) < ldqr.TAP_THRESHOLD;
  if (this.xTap && this.yTap) {
    console.log(event.type);
    // event.preventDefault();
    if (elt.getAttribute("id") === "retourPage") {
      window.location.href = elt.dataset.retourPage;
      return;
    }
    if (elt.classList.contains("bouton-accueil")) {
      document.location.href = "./page00.xhtml";
    } else if (elt.classList.contains("bouton-notice")) {
      document.location.href = "./notice_toc.xhtml";
    } else if (elt.classList.contains("bouton-credits")) {
      document.location.href = "./credits.xhtml";
    } else if (elt.classList.contains("pa-menu-bouton")) {
      this.ouvreConfig();
    } else if (elt.classList.contains("bouton-valider")) {
      this.validerConfig();
    } else if (elt.classList.contains("bouton-reinitialiser")) {
      this.reinitialiserConfig();
    }
  }
};

/**
 *  Trie Event
 */
ldqrBoutonMenu.prototype.handleEvent = function (event) {
  switch (event.type) {
    case "touchstart":
    case "mousedown":
      this.touchStart(event);
      break;
    case "touchend":
    case "mouseup":
      this.touchEnd(event);
      break;
    case "touchmove":
    case "mousemove":
      this.touchMove(event);
      break;
  }
};

ldqrBoutonMenu.prototype.ouvreConfig = function (event) {
  console.log("ouvreConfig");
  var elt = this.el;
  affichagePageMenu(elt.getAttribute("id"));
};

ldqrBoutonMenu.prototype.validerConfig = function (event) {
  var elt = this.el;

  var eltCheked = document.querySelectorAll(".checked,#boutonCouleur"),
    clength = eltCheked.length,
    i = 0;
  console.log("checked", eltCheked);

  for (; i !== clength; i++) {
    var fonction = fonctionBouton(eltCheked[i]);
    var val = eltCheked[i].getAttribute("id");
    if (fonction === "couleur-image") {
      if (document.getElementById("boutonCouleur").classList.contains("notDisplay")) {
        val = "boutonCouleur";
      } else {
        val = "boutonBW";
      }
    }
    if (fonction === "bouton-dys-choix") {
      val = returnTabChoix(".bouton-dys-choix");
    }
    if (fonction === "vitesse-double-tape") {
      val = eltCheked[i].querySelector("text").innerHTML;
    }

    ldqr.DATA_LOCAL_FORAGE.setItem(fonction, val).then(function (d) {
      // new choixFontName(d);
      // ldqrBoutonController.setPositionTriangleBulle();
    });
    // setLocalForage(eltCheked[i]);
    // console.log(eltCheked[i]);
  }
  // copieLocalForage(elt);
  affichagePageMenu(elt.getAttribute("id"));
};
ldqrBoutonMenu.prototype.reinitialiserConfig = function (event) {
  console.log("reinitialiserConfig");
  var elt = this.el;
  console.log(elt);
  var arr = [];
  switch (elt.getAttribute("id")) {
    case "boutonReinitialiserConfigTexte":
      arr = ["font-name", "couleur-fond", "bouton-dys-active", "font-casse", "bouton-bulle-active"];

      break;
    case "boutonReinitialiserConfigImage":
      arr = ["def-image", "bouton-couleur-active", "bouton-version-active", "couleur-image"];

      break;
    case "boutonReinitialiserConfigAudio":
      arr = ["vitesse-audio-voix", "bouton-audio-active"];

      break;
    case "boutonReinitialiserConfigErgo":
      arr = ["vitesse-double-tape"];

      break;

    default:
      break;
  }
  for (i = 0; i !== arr.length; i++) {
    ldqr.DATA_LOCAL_FORAGE.removeItem(arr[i])
      .then(function () {
        // Run this code once the key has been removed.
        console.log("Key is cleared!");
      })
      .catch(function (err) {
        // This code runs if there were any errors
        console.log(err);
      });
  }
  appliqueLocalForage();
};

/**
 * Crée les instances quand le DOM est chargé
 */
window.addEventListener(
  "DOMContentLoaded",
  function () {
    window.ldqrController = new ldqrBaseBoutonMenu();

    console.log("loaded");
  },
  false
);

function getMobileOperatingSystem() {
  var a = navigator.userAgent || navigator.vendor || window.opera;
  if (/windows/i.test(a)) {
    return "Windows";
  }
  if (/android/i.test(a)) {
    return "Android";
  }
  if (/iPad|iPhone|iPod/.test(a) && !window.MSStream) {
    return "iOS";
  }
  return "iOS";
}

function affichagePageMenu(id) {
  console.log("affichagePageMenu");
  var maConfig;
  var monLink;
  var monTexte = document.getElementById("monTexte");
  var page_accueil = document.getElementById("Accueil");
  var affiche = false;
  const url = new URL(window.location.href);
  switch (id) {
    case "AudioBoutonChoix":
      maConfig = document.getElementById("configAudio");
      url.hash = "configAudio";
      affiche = true;
      break;
    case "ErgoBoutonChoix":
      maConfig = document.getElementById("configErgo");
      url.hash = "configErgo";
      affiche = true;
      break;
    case "ImageBoutonChoix":
      maConfig = document.getElementById("configImage");
      affiche = true;
      url.hash = "configImage";
      break;
    case "TexteBoutonChoix":
      maConfig = document.getElementById("configTexte");
      monTexte && monTexte.classList.remove("notDisplay");
      url.hash = "configTexte";
      affiche = true;
      break;
    case "boutonValiderConfigAudio":
      maConfig = document.getElementById("configAudio");
      url.hash = "Accueil";

      break;
    case "boutonValiderConfigImage":
      maConfig = document.getElementById("configImage");
      url.hash = "Accueil";

      break;
    case "boutonValiderConfigTexte":
      maConfig = document.getElementById("configTexte");
      monTexte && monTexte.classList.add("notDisplay");
      url.hash = "Accueil";

      break;
    case "boutonValiderConfigErgo":
      maConfig = document.getElementById("configErgo");

      break;

    default:
      break;
  }
  if (affiche) {
    maConfig.classList.remove("notDisplay");
    page_accueil.classList.add("notDisplay");
    window.location.href = url;
  } else {
    maConfig.classList.add("notDisplay");
    page_accueil.classList.remove("notDisplay");
    window.location.href = url;
  }
}

function copieLocalForage() {
  var eltCheked = document.querySelectorAll(".checked"),
    clength = eltCheked.length,
    i = 0;
  for (; i !== clength; i++) {
    setLocalForage(eltCheked[i]);
    console.log(eltCheked[i]);
  }
}

function appliqueLocalForage() {
  // ldqr.DATA_LOCAL_FORAGE.getItem("affiche-texte").then(function (d) {
  //   d = d || "afficherTexte";
  //   // ldqrLocalForage.initVersion();
  //   new affichageTexte(d);
  // });
  // ldqr.DATA_LOCAL_FORAGE.getItem("affiche-image").then(function (d) {
  //   d = d || "afficherImage";
  //   // ldqrLocalForage.initVersion();
  //   new affichageImage(d);
  // });
  // applique la font
  ldqr.DATA_LOCAL_FORAGE.getItem("font-name").then(function (d) {
    d = d || "choixLucioleBold";
    console.log(d);
    new choixFontName(d);
  });
  ldqr.DATA_LOCAL_FORAGE.getItem("home-location").then(function (d) {
    console.log(d);
  });
  // applique la taille de la police
  // ldqr.DATA_LOCAL_FORAGE.getItem("font-size").then(function (d) {
  //   d = d || ldqr.FONT_SIZE_CSS_CLASS[0];
  //   new choixFontSize(d);
  // });
  // // applique l'espacement des mots
  // ldqr.DATA_LOCAL_FORAGE.getItem("space-word").then(function (d) {
  //   d = d || ldqr.FONT_SPACE_WORD_CSS_CLASS[0];
  //   // new choixSpaceWord(d);
  // });
  // // applique l'espacement des caractères
  // ldqr.DATA_LOCAL_FORAGE.getItem("space-car").then(function (d) {
  //   d = d || ldqr.FONT_SPACE_CAR_CSS_CLASS[0];
  //   // new choixSpaceCar(d);
  // });
  // // applique l'espacement des lignes
  // ldqr.DATA_LOCAL_FORAGE.getItem("space-line").then(function (d) {
  //   d = d || ldqr.FONT_SPACE_LINE_CSS_CLASS[0];
  //   // new choixSpaceLine(d);
  // });
  // applique la couleur de fond
  ldqr.DATA_LOCAL_FORAGE.getItem("couleur-fond").then(function (d) {
    d = d || ldqr.COULEURS_FOND_CSS_CLASS[0];
    new choixCouleurFond(d);
  });
  // applique texte
  ldqr.DATA_LOCAL_FORAGE.getItem("texte-image").then(function (d) {
    d = d || "texteImage";
    // new choixTexteImage(d);
  });
  // applique les degrés
  // new versionImage();
  ldqr.DATA_LOCAL_FORAGE.getItem("def-image").then(function (d) {
    d = d || "version01";
    new choixVersionImage(d);
    new choixVersionImage00();
  });

  // applique la casse
  ldqr.DATA_LOCAL_FORAGE.getItem("font-casse").then(function (d) {
    d = d || "activerMinuscule";
    console.log(d);
    new activerMajuscule(d);
  });
  // active bulle ou ligne
  ldqr.DATA_LOCAL_FORAGE.getItem("bouton-bulle-active").then(function (d) {
    d = d || "activerBulle";
    // new activerBulleLigne(d);
  });

  //applique noir et blanc
  ldqr.DATA_LOCAL_FORAGE.getItem("couleur-image").then(function (d) {
    d = d || "boutonCouleur";

    new choixCouleurImage(d);
    new choixVersionImage00();
  });
  ldqr.DATA_LOCAL_FORAGE.getItem("bouton-version-active").then(function (d) {
    d = d || "activerImageVersion";
    console.log(d);
    new activerDesactiverBoutonVersion(d);
  });
  ldqr.DATA_LOCAL_FORAGE.getItem("bouton-couleur-active").then(function (d) {
    d = d || "activerCouleurImage";
    console.log(d);
    new activerDesactiverBoutonCouleur(d);
  });
  ldqr.DATA_LOCAL_FORAGE.getItem("bouton-dys-active").then(function (d) {
    d = d || "desactiverDYS";
    console.log(d);
    new activerDesactiverBoutonDYS(d);
  });
  ldqr.DATA_LOCAL_FORAGE.getItem("bouton-audio-active").then(function (d) {
    d = d || "activerAudio";
    console.log(d);
    new activerDesactiverBoutonAudio(d);
  });
  ldqr.DATA_LOCAL_FORAGE.getItem("bouton-dys-choix").then(function (d) {
    d = d || [false, false, false, false];
    new activerDesactiverBoutonDYSchoix(d);
  });
  ldqr.DATA_LOCAL_FORAGE.getItem("vitesse-audio-voix").then(function (d) {
    d = d || 1;
    ldqr.VITESSE_SON_VOIX = d;
    var vitesseVal = document.getElementById("vitesseAudioVal");
    var txtVitesse = vitesseVal && vitesseVal.querySelector("text");
    txtVitesse && (txtVitesse.innerHTML = d);
  });
  // ldqr.DATA_LOCAL_FORAGE.getItem("vitesse-double-tape").then(function (d) {
  //   d = d || 0.5;
  //   ldqr.VITESSE_DOUBLE_TAPE = d;
  //   var vitesseVal = document.getElementById("dblTapeVal");
  //   var txtVitesse = vitesseVal && vitesseVal.querySelector("text");
  //   txtVitesse && (txtVitesse.innerHTML = d);
  // });
}
